// Mandatory Assignment
// Dashboard
 // Class Definitions
 //
class Vector
{
    //
    constructor( vX, vY )
    {
        this.x = vX;
        this.y = vY;
    }


    // Works
    substract( px, py )
    {
        var newVector = GenVec( ( this.x - px ), 
                                ( this.y - py ) );
        return newVector;
    }

    // Works
    addition( px, py )
    {
        var newVector = GenVec( ( this.x + px ), 
                                ( this.y + py ) );
        return newVector;
    }

    // Works
    scale( s )
    {
        var newVector = GenVec( ( s * this.x ),
                                ( s * this.y ) );
        return newVector;
    }

    pow2( value )
    {
        return Math.pow( value, 
                         two );
    }

    // |v(->)| = distance.
    // Calculates the currents vectors, distance or length
    distance()
    {
        // x^2
        var x_result = this.pow2(this.x);
                                     
        // y^2
        var y_result = this.pow2(this.y);

        // x_result + y_result
        var combined = (x_result + y_result);
        
        // sqrt(x^2 + y^2) = |v^(->)|
        return Math.sqrt( combined );
    }
}

    // Generators
function GenVec( pX, pY )
{
    return new Vector( pX, pY );
}
    
function GenEmptyVector()
{
    return GenVec(0, 0);
}


/* 
*/
class Entity
{
    constructor();

};

/* 
 *
 */
class Actor 
    extends Entity
{
    constructor();

};

/*
 * 
 */
class Effect 
    extends Entity
{
    constructor();

};

/* 
 *
 */
class Interactive 
    extends Entity
{
    constructor();

};

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/* 
 *
 */
class CameraField 
    extends Actor
{
    constructor();

};


// Vector Coordinate
class Point
{
    constructor( pX, pY )
    {
        this.x = pX;
        this.y = pY;
    }

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

// Tag: Variables
    // Application Variables
var canvas_id = null;
var context = null;

var Continue = true;

//
var start_screen_pos = new Point(0, 0);

// Properties
var canvas_size = new Vector(1280, 720);
var canvas_id_name = 'dashboard';

// Static Globals
const two = 2;
const dimension = '2d';


/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

// Tag: context functions
// Draw on Context: Base Functions
// Base Drawing
function line( point_begin, 
               point_end )
{    
    context.beginPath();

    context.moveTo( point_begin.x, 
                    point_begin.y );

    context.lineTo( point_end.x, 
                    point_end.y );

    context.stroke();
}

// Parameters: SP (Start Point), V: Vector (size and direction)
function clearScreenAt(SP, V)
{
    var toPoint = V.addition( SP.x, SP.y );

    context.clearRect( SP.x, SP.y, 
                       toPoint.x, toPoint.y);
}

function clearScreen()
{
    clearScreenAt( start_screen_pos,
                   canvas_size )   
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

// Program Logic
    // Initialise Stage
function init()
{
    //
    configure();

    //
    prepare();

    // Starts system
    next();
}

        // Configuration
function configure()
{
    configure_stage();


}

            // setup required components
function configure_stage()
{
    canvas_id = document.getElementById( canvas_id_name );
    context = canvas_id.getContext( dimension );
}

        //
function prepare()
{

}

// Draw Operations
function draw()
{
    clearScreen();

    //
    analyze();

    // 
    map();

    // Outline
    representation();

    // Draw
    present();

    next();
}

// Phrases
    //
function clear()
{
    // Clean current Canvas
    clearScreen();
}

    // 
function analyze()
{

}

    //
function map()
{

}

    // 
function representation()
{

}

    // final stage: 
function present()
{

}

// Internal Business Logic Phrase
function update()
{

    
    next();
}


// Request a new frame or stop
function next()
{
    //
    if( Continue )
    {
        //
        additional();

        // Update System Model
        update();
        
        //
        window.requestAnimationFrame( draw );
    }
}

function additional()
{

}

// Execute Script
init();